name: Release WSL Image

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - 'images/**'
      - '**.md'
      - '!README.md'
      - '.github/workflows/stats.yml'
  pull_request:
    branches:
      - '**'
    paths-ignore:
      - 'docs/**'
      - 'images/**'
      - '**.md'
      - '!README.md'
      - '.github/workflows/stats.yml'
      - 'config/bundle-ca.pem'

jobs:
  deploy:
    permissions:
      contents: write # for checkout
      pull-requests: write
      issues: write
    runs-on: ubuntu-latest
    environment:
      name: github-app-cdc-coe-botfrey
    steps:
      ## The default Github token does not provide a way for semantic release
      ## to publish to a protected branch without having an administrative bot
      ## account with bypass options within the repository's settings.
      ## https://github.com/orgs/community/discussions/25305
      - uses: actions/create-github-app-token@d72941d797fd3113feb6b93fd0dec494b13a2547 # v1.12.0
        id: app-token
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}

      - name: Checkout the codebase
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}
          persist-credentials: true

      - name: Setup Node.js
        uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e # v4.3.0
        with:
          cache: npm
          node-version: 'lts/*'

      - name: Install dependencies
        run: npm clean-install

      - name: Verify the integrity of provenance attestations and registry signatures for installed dependencies
        run: npm audit signatures

      # Hack around --dry-run to get the result of the PR merge on the correct ref
      # https://github.com/semantic-release/semantic-release/issues/1890#issuecomment-974512960
      - name: 🔬 Check semantic versioning
        id: semantic-release
        if: ${{ github.ref != 'refs/heads/main' }}
        env:
          base_ref: ${{ github.base_ref }}
          event_number: ${ github.event.number }
        run: |
          git checkout -b ${{ env.base_ref }} pull/${{ env.event_number }}/merge
          unset GITHUB_ACTIONS;
          npx semantic-release --no-ci --dry-run --plugins @semantic-release/commit-analyzer,@semantic-release/release-notes-generator > output.txt
          OUTPUT=$(base64 -w 0 < output.txt)
          echo "releaseNote=$OUTPUT" >> "$GITHUB_OUTPUT"

      - name: 📝 Report semantic versioning
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        if: github.ref != 'refs/heads/main' && steps.semantic-release.outputs.releaseNote != ''
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // build release note
            const semanticReleaseOutput = Buffer.from('${{ steps.semantic-release.outputs.releaseNote }}', 'base64').toString('utf8');
            const semanticReleaseLogMatch = /^[[0-9:\sAMPM]+\]\s\[semantic-release\].*$/;
            const lines = semanticReleaseOutput.split('\n');
            const lastSemanticReleaseLogIndex = [...lines]
              .reverse()
              .findIndex((line) => line.match(semanticReleaseLogMatch));

            const releaseNoteIndex = lines.length - lastSemanticReleaseLogIndex;
            const releaseNote = lines.slice(releaseNoteIndex);

            let res = releaseNote.join('\n');
            if (!releaseNote.length || !res) {
              res = '### No release note would be generated.';
            }

            const SEMANTIC_RELEASE_BODY_HEADER = '## 📝 Semantic Release Report';
            const body = [SEMANTIC_RELEASE_BODY_HEADER, res].join('\n');

            // get last comment
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            // find comments to delete
            const commentsToDelete = comments.data.filter((comment) =>
              comment.body.startsWith(SEMANTIC_RELEASE_BODY_HEADER)
            );

            // delete comments
            const prms = commentsToDelete.map((comment) =>
              github.rest.issues.deleteComment({
                comment_id: comment.id,
                owner: context.repo.owner,
                repo: context.repo.repo
              })
            );

            await Promise.all(prms);

            // create new comment for release note
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });

      - name: Set up Podman
        run: |
          # Install Podman (if not already installed)
          if ! command -v podman &> /dev/null; then
            sudo apt update
            sudo apt install -y podman
          fi
          # Display Podman version
          podman --version
        shell: bash

      - name: Generate tars
        run: |
          bash build.sh

      - name: Generate checksum
        env:
          IMAGE_NAME: 'ubuntu-24.04-cdc.tar'
        run: |
          sha256sum "$IMAGE_NAME" > checksums.txt
        working-directory: ./images

      - name: Release
        if: github.ref == 'refs/heads/main'
        env:
          GH_TOKEN: '${{ steps.app-token.outputs.TOKEN }}'
          GITHUB_TOKEN: '${{ steps.app-token.outputs.TOKEN }}'
        run: |
          npx semantic-release
