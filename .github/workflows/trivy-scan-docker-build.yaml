name: Trivy Scan Docker build
on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  trivy-scan:
    runs-on: [edso-non-prod-runner]
    steps:
      - name: Checkout code (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: false

      - name: Detect changed Dockerfiles or dependencies
        id: detect_dockerfiles
        run: |
          # Reference the root dir of the repo
          echo "base_dir=$(pwd)" >> $GITHUB_ENV

          # Report files changed in this branch
          changed_files=$(git diff --name-only origin/${{ github.event.pull_request.base.ref || 'master' }}...${{ github.sha }})
          
          echo "Changed files:"
          echo "$changed_files"

          affected_dirs=()

          # Find all Dockerfiles
          dockerfiles=$(find . -type f -name Dockerfile)

          for dockerfile in $dockerfiles; do
            docker_dir=$(dirname "$dockerfile")
            relative_df=${dockerfile#./}

            # If the Dockerfile itself changed
            if echo "$changed_files" | grep -Fxq "$relative_df"; then
              affected_dirs+=("$docker_dir")
              continue
            fi

            # Identify any source files added to the Dockerfile. These may be in different paths.
            copy_sources=$(grep -E '^\s*(COPY|ADD)\s' "$dockerfile" | awk '{print $2}')

            for src in $copy_sources; do
              full_path="$docker_dir/$src"
              clean_path=${full_path#./}  # Remove leading ./

              if echo "$changed_files" | grep -Fxq "$clean_path"; then
                affected_dirs+=("$docker_dir")
                break
              fi
            done
          done

          # Deduplicate
          if [ ${#affected_dirs[@]} -eq 0 ]; then
            echo "No Dockerfiles or related files changed."
            echo "changed_dirs=" >> $GITHUB_ENV
            exit 0
          fi

          changed_dirs=$(printf "%s\n" "${affected_dirs[@]}" | sort -u | tr '\n' ' ')
          echo "Found changed Dockerfile directories (including dependencies): $changed_dirs"
          echo "changed_dirs=$changed_dirs" >> $GITHUB_ENV

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Build & scan changed Docker contexts
        run: |
          echo "Changes in $changed_dirs"
          for dir in $changed_dirs; do
            safe_name=${dir//\//-}
            echo "safe_name is ${safe_name}"
            echo "Building image in ${dir}"
            echo "safe_name=" >> $GITHUB_ENV
            docker build -t tst-app:latest "$dir"

            echo "Scanning image from $dir to SARIF"
            docker run --rm \
              -v /var/run/docker.sock:/var/run/docker.sock \
              -v ${base_dir}:/report \
              aquasec/trivy \
              image \
              --format sarif \
              --output /report/trivy-${safe_name}.sarif \
              --ignore-unfixed \
              --exit-code 0 \
              --severity CRITICAL,HIGH \
              tst-app:latest
            
            docker rmi tst-app:latest
          done

      - name: Upload Trivy SARIFs to Security tab
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          base_dir: ${{ github.workspace }}
        run: |
          for file in ${base_dir}/trivy-*.sarif; do
            if [[ -f "$file" ]]; then
              echo "Uploading SARIF: $file"
              
              # Compress and encode the SARIF file
              gzip -c "$file" | base64 > encoded.sarif

              # Create the full JSON payload
              jq -n \
                --arg sarif "$(cat encoded.sarif)" \
                --arg commit_sha "${{ github.sha }}" \
                --arg ref "${{ github.ref }}" \
                --arg checkout_uri "file://${{ github.workspace }}" \
                --arg started_at "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
                '{
                  commit_sha: $commit_sha,
                  ref: $ref,
                  sarif: $sarif,
                  checkout_uri: $checkout_uri,
                  started_at: $started_at
                }' > payload.json

              # Upload via GitHub API
              gh api \
                --method POST \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                /repos/${{ github.repository }}/code-scanning/sarifs \
                --input payload.json
            fi
          done